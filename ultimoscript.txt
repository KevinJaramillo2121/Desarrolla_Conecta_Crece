-- ACTIVAR EXTENSIONES ÚTILES
CREATE EXTENSION IF NOT EXISTS citext;
CREATE EXTENSION IF NOT EXISTS pgcrypto;

-- =================================================================
-- TIPOS ENUMERADOS (ENUM)
-- =================================================================
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'tipo_rol') THEN
        CREATE TYPE tipo_rol AS ENUM ('Participante', 'Evaluador', 'Administrador');
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'estado_postulacion') THEN
        CREATE TYPE estado_postulacion AS ENUM ('borrador', 'enviado');
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'estado_preseleccion') THEN
        CREATE TYPE estado_preseleccion AS ENUM ('Preseleccionado', 'No_preseleccionado', 'Sin evaluar');
    END IF;
END
$$ LANGUAGE plpgsql;

-- =================================================================
-- TABLAS PRINCIPALES
-- =================================================================

-- TABLA EMPRESAS
CREATE TABLE IF NOT EXISTS empresas (
    id                   SERIAL        PRIMARY KEY,
    nombre_legal         VARCHAR(255)  NOT NULL UNIQUE,
    nit                  VARCHAR(20)   NOT NULL UNIQUE,
    persona_juridica     BOOLEAN       NOT NULL,
    tipo_empresa         VARCHAR(10)   NOT NULL CHECK (tipo_empresa IN ('Micro','Pequeña','Mediana')),
    representante        VARCHAR(255)  NOT NULL,
    cedula_representante VARCHAR(20)   NOT NULL,
    correo_contacto      CITEXT        NOT NULL,
    telefono_contacto    VARCHAR(30)   NOT NULL,
    municipio            VARCHAR(100)  NOT NULL,
    direccion            VARCHAR(255),
    fuera_valle          BOOLEAN       NOT NULL,
    afiliada_comfama     BOOLEAN       NOT NULL,
    tiene_trabajador     BOOLEAN       NOT NULL,
    fecha_creacion       TIMESTAMP     NOT NULL DEFAULT now(),
    fecha_actualizacion  TIMESTAMP
);
CREATE INDEX IF NOT EXISTS idx_empresas_municipio ON empresas(municipio);

-- TABLA ROLES
CREATE TABLE IF NOT EXISTS roles (
    id             SERIAL       PRIMARY KEY,
    nombre         tipo_rol     UNIQUE NOT NULL,
    descripcion    TEXT,
    fecha_creacion TIMESTAMP    NOT NULL DEFAULT now()
);

-- TABLA USUARIOS (Depende de roles y empresas)
CREATE TABLE IF NOT EXISTS usuarios (
    id                  SERIAL       PRIMARY KEY,
    nombre_usuario      VARCHAR(100) UNIQUE NOT NULL,
    correo              CITEXT       UNIQUE NOT NULL,
    password_hash       VARCHAR(255) NOT NULL,
    nombre_completo     VARCHAR(255) NOT NULL,
    rol_id              INT          NOT NULL REFERENCES roles(id) ON DELETE RESTRICT,
    empresa_id          INT          REFERENCES empresas(id) ON DELETE SET NULL,
    activo              BOOLEAN      NOT NULL DEFAULT TRUE,
    fecha_creacion      TIMESTAMP    NOT NULL DEFAULT now(),
    fecha_ultimo_acceso TIMESTAMP
);
CREATE INDEX IF NOT EXISTS idx_usuarios_rol_id ON usuarios(rol_id);
CREATE INDEX IF NOT EXISTS idx_usuarios_empresa_id ON usuarios(empresa_id);

-- TABLA CONVOCATORIA
CREATE TABLE IF NOT EXISTS convocatoria (
    id             SERIAL      PRIMARY KEY,
    fecha_inicio   DATE        NOT NULL,
    fecha_fin      DATE        NOT NULL
);

-- TABLA POSTULACIONES (Depende de empresas)
CREATE TABLE IF NOT EXISTS postulaciones (
    id                  SERIAL             PRIMARY KEY,
    empresa_id          INT                NOT NULL UNIQUE REFERENCES empresas(id) ON DELETE CASCADE,
    producto_info       JSONB,
    brechas             JSONB,
    motivacion          JSONB,
    estado              estado_postulacion NOT NULL DEFAULT 'borrador',
    fecha_envio         TIMESTAMP,
    fecha_creacion      TIMESTAMP          NOT NULL DEFAULT now(),
    fecha_actualizacion TIMESTAMP
);
CREATE INDEX IF NOT EXISTS idx_postulaciones_estado ON postulaciones(estado);
CREATE INDEX IF NOT EXISTS idx_postulaciones_gin_producto ON postulaciones USING gin(producto_info);

-- TABLA SELECCION (CORREGIDA, depende de empresas y usuarios)
CREATE TABLE IF NOT EXISTS seleccion (
    id                   SERIAL               PRIMARY KEY,
    empresa_id           INT                  NOT NULL REFERENCES empresas(id) ON DELETE CASCADE,
    evaluador_id         INT                  REFERENCES usuarios(id) ON DELETE SET NULL,
    estado_preseleccion  estado_preseleccion  NOT NULL DEFAULT 'Sin evaluar',
    observaciones        TEXT,
    criterios_evaluacion JSONB,
    es_definitiva        BOOLEAN              NOT NULL DEFAULT FALSE,
    fecha_evaluacion     TIMESTAMP,
    fecha_creacion       TIMESTAMP            NOT NULL DEFAULT now(),
    fecha_actualizacion  TIMESTAMP,
    -- Cada evaluador solo puede tener una evaluación por empresa.
    -- La evaluación definitiva del admin es un caso especial.
    CONSTRAINT unica_evaluacion_por_evaluador UNIQUE (empresa_id, evaluador_id)
);
CREATE INDEX IF NOT EXISTS idx_seleccion_empresa_evaluador ON seleccion(empresa_id, evaluador_id);
CREATE INDEX IF NOT EXISTS idx_seleccion_estado ON seleccion(estado_preseleccion);

-- =================================================================
-- DATOS INICIALES (SEED DATA)
-- =================================================================

-- Insertar roles si no existen
INSERT INTO roles (nombre, descripcion) VALUES
    ('Administrador', 'Rol con acceso total al sistema'),
    ('Evaluador', 'Rol para revisar y calificar postulaciones'),
    ('Participante', 'Rol para empresas que se postulan a la convocatoria')
ON CONFLICT (nombre) DO NOTHING;

-- Insertar usuarios de prueba (con contraseñas hasheadas usando bcrypt desde la app)
-- NOTA: Por seguridad, las contraseñas deberían ser creadas desde tu aplicación con bcrypt.
-- Estos hashes son de ejemplo y no se generaron con pgcrypto. Debes crear los usuarios desde tu UI de registro.
-- Ejemplo de cómo crear un admin manualmente si lo necesitas:
INSERT INTO usuarios (nombre_usuario, correo, password_hash, nombre_completo, rol_id)
VALUES
  ('admin', 'admin@aoxlab.com', '$2b$10$DaG7N4gZz.vj05s5j4E.e.9/M2efVlajD9AczGg/dJmJ3yY2DkTHi', 'Administrador Principal', (SELECT id FROM roles WHERE nombre = 'Administrador'))
ON CONFLICT (nombre_usuario) DO NOTHING;
-- La contraseña para el usuario 'admin' es 'admin123'

-- =================================================================
-- VISTAS
-- =================================================================

CREATE OR REPLACE VIEW vista_general_evaluaciones AS
SELECT
    e.id AS empresa_id,
    e.nombre_legal,
    e.nit,
    p.id AS postulacion_id,
    p.estado AS estado_postulacion,
    -- Se toma la selección definitiva si existe, si no, la más reciente
    COALESCE(
        (SELECT s.estado_preseleccion FROM seleccion s WHERE s.empresa_id = e.id AND s.es_definitiva = TRUE LIMIT 1),
        (SELECT s.estado_preseleccion FROM seleccion s WHERE s.empresa_id = e.id ORDER BY s.fecha_actualizacion DESC NULLS LAST, s.fecha_creacion DESC LIMIT 1),
        'Sin evaluar'
    ) AS estado_final_seleccion,
    (SELECT COUNT(*) FROM seleccion s WHERE s.empresa_id = e.id) AS total_evaluaciones
FROM empresas e
LEFT JOIN postulaciones p ON e.id = p.empresa_id;




-- Script para limpiar y repoblar usuarios con contraseñas correctas
BEGIN;

-- 1. Vaciar la tabla de usuarios y reiniciar el contador de ID
-- La opción CASCADE se asegura de limpiar cualquier dependencia en otras tablas.
TRUNCATE TABLE usuarios RESTART IDENTITY CASCADE;

-- Inserción de USUARIOS base para pruebas (ajusta o elimina luego si no los necesitas)
INSERT INTO usuarios (nombre_usuario, correo, password_hash, nombre_completo, rol_id)
VALUES 
  ('JefeMaestro', 'jefe@ejemplo.com',
   crypt('ElefanteGuerreroPsiquicoAncestral345', gen_salt('bf')),
   'Jefe Maestro', 
   (SELECT id FROM roles WHERE nombre = 'Administrador')),
   
  ('Yasmin', 'yasmin@ejemplo.com',
   crypt('Perro_Chancletudo_Con_papada6345', gen_salt('bf')),
   'Yasmin L.', 
   (SELECT id FROM roles WHERE nombre = 'Administrador'));

-- Evaluadores
INSERT INTO usuarios (nombre_usuario, correo, password_hash, nombre_completo, rol_id)
VALUES 
  ('evaluador1', 'eval1@ejemplo.com',
   crypt('password', gen_salt('bf')),
   'Evaluador Uno', 
   (SELECT id FROM roles WHERE nombre = 'Evaluador')),

  ('evaluador2', 'eval2@ejemplo.com',
   crypt('password', gen_salt('bf')),
   'Evaluador Dos', 
   (SELECT id FROM roles WHERE nombre = 'Evaluador'));

-- Participantes
INSERT INTO usuarios (nombre_usuario, correo, password_hash, nombre_completo, rol_id)
VALUES 
  ('participante1', 'part1@ejemplo.com',
   crypt('password', gen_salt('bf')),
   'Participante Uno', 
   (SELECT id FROM roles WHERE nombre = 'Participante')),

  ('participante2', 'part2@ejemplo.com',
   crypt('password', gen_salt('bf')),
   'Participante Dos', 
   (SELECT id FROM roles WHERE nombre = 'Participante'));

COMMIT;




SELECT nombre_usuario, password_hash FROM usuarios;


